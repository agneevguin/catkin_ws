// Generated by gencpp from file am_driver/LoopData.msg
// DO NOT EDIT!


#ifndef AM_DRIVER_MESSAGE_LOOPDATA_H
#define AM_DRIVER_MESSAGE_LOOPDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace am_driver
{
template <class ContainerAllocator>
struct LoopData_
{
  typedef LoopData_<ContainerAllocator> Type;

  LoopData_()
    : frontCenter(0)
    , frontRight(0)
    , rearLeft(0)
    , rearRight(0)  {
    }
  LoopData_(const ContainerAllocator& _alloc)
    : frontCenter(0)
    , frontRight(0)
    , rearLeft(0)
    , rearRight(0)  {
  (void)_alloc;
    }



   typedef int32_t _frontCenter_type;
  _frontCenter_type frontCenter;

   typedef int32_t _frontRight_type;
  _frontRight_type frontRight;

   typedef int32_t _rearLeft_type;
  _rearLeft_type rearLeft;

   typedef int32_t _rearRight_type;
  _rearRight_type rearRight;




  typedef boost::shared_ptr< ::am_driver::LoopData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::am_driver::LoopData_<ContainerAllocator> const> ConstPtr;

}; // struct LoopData_

typedef ::am_driver::LoopData_<std::allocator<void> > LoopData;

typedef boost::shared_ptr< ::am_driver::LoopData > LoopDataPtr;
typedef boost::shared_ptr< ::am_driver::LoopData const> LoopDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::am_driver::LoopData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::am_driver::LoopData_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace am_driver

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'am_driver': ['/home/agneev/catkin_ws/src/hrp/am_driver/msg', '/home/agneev/catkin_ws/src/hrp/am_driver/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::am_driver::LoopData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::am_driver::LoopData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::am_driver::LoopData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::am_driver::LoopData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::am_driver::LoopData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::am_driver::LoopData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::am_driver::LoopData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "14810c138ea56e7a9aeb63a60064efdb";
  }

  static const char* value(const ::am_driver::LoopData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x14810c138ea56e7aULL;
  static const uint64_t static_value2 = 0x9aeb63a60064efdbULL;
};

template<class ContainerAllocator>
struct DataType< ::am_driver::LoopData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "am_driver/LoopData";
  }

  static const char* value(const ::am_driver::LoopData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::am_driver::LoopData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 frontCenter\n\
int32 frontRight\n\
int32 rearLeft\n\
int32 rearRight\n\
 \n\
";
  }

  static const char* value(const ::am_driver::LoopData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::am_driver::LoopData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.frontCenter);
      stream.next(m.frontRight);
      stream.next(m.rearLeft);
      stream.next(m.rearRight);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct LoopData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::am_driver::LoopData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::am_driver::LoopData_<ContainerAllocator>& v)
  {
    s << indent << "frontCenter: ";
    Printer<int32_t>::stream(s, indent + "  ", v.frontCenter);
    s << indent << "frontRight: ";
    Printer<int32_t>::stream(s, indent + "  ", v.frontRight);
    s << indent << "rearLeft: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rearLeft);
    s << indent << "rearRight: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rearRight);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AM_DRIVER_MESSAGE_LOOPDATA_H
