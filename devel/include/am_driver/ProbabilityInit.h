// Generated by gencpp from file am_driver/ProbabilityInit.msg
// DO NOT EDIT!


#ifndef AM_DRIVER_MESSAGE_PROBABILITYINIT_H
#define AM_DRIVER_MESSAGE_PROBABILITYINIT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace am_driver
{
template <class ContainerAllocator>
struct ProbabilityInit_
{
  typedef ProbabilityInit_<ContainerAllocator> Type;

  ProbabilityInit_()
    : name()
    , position()
    , radius()  {
    }
  ProbabilityInit_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , position(_alloc)
    , radius(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _position_type;
  _position_type position;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _radius_type;
  _radius_type radius;




  typedef boost::shared_ptr< ::am_driver::ProbabilityInit_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::am_driver::ProbabilityInit_<ContainerAllocator> const> ConstPtr;

}; // struct ProbabilityInit_

typedef ::am_driver::ProbabilityInit_<std::allocator<void> > ProbabilityInit;

typedef boost::shared_ptr< ::am_driver::ProbabilityInit > ProbabilityInitPtr;
typedef boost::shared_ptr< ::am_driver::ProbabilityInit const> ProbabilityInitConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::am_driver::ProbabilityInit_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::am_driver::ProbabilityInit_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace am_driver

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'am_driver': ['/home/agneev/catkin_ws/src/hrp/am_driver/msg', '/home/agneev/catkin_ws/src/hrp/am_driver/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::am_driver::ProbabilityInit_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::am_driver::ProbabilityInit_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::am_driver::ProbabilityInit_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::am_driver::ProbabilityInit_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::am_driver::ProbabilityInit_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::am_driver::ProbabilityInit_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::am_driver::ProbabilityInit_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a74a41c569680dcfef7a97c87caeac45";
  }

  static const char* value(const ::am_driver::ProbabilityInit_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa74a41c569680dcfULL;
  static const uint64_t static_value2 = 0xef7a97c87caeac45ULL;
};

template<class ContainerAllocator>
struct DataType< ::am_driver::ProbabilityInit_<ContainerAllocator> >
{
  static const char* value()
  {
    return "am_driver/ProbabilityInit";
  }

  static const char* value(const ::am_driver::ProbabilityInit_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::am_driver::ProbabilityInit_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n\
geometry_msgs/Point[] position\n\
float32[] radius\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::am_driver::ProbabilityInit_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::am_driver::ProbabilityInit_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.position);
      stream.next(m.radius);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct ProbabilityInit_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::am_driver::ProbabilityInit_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::am_driver::ProbabilityInit_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "position[]" << std::endl;
    for (size_t i = 0; i < v.position.size(); ++i)
    {
      s << indent << "  position[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.position[i]);
    }
    s << indent << "radius[]" << std::endl;
    for (size_t i = 0; i < v.radius.size(); ++i)
    {
      s << indent << "  radius[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.radius[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // AM_DRIVER_MESSAGE_PROBABILITYINIT_H
